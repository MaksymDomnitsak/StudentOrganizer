spring.application.name=ScheduleTeachSubj
server.port=8083

spring.datasource.hikari.connection-timeout=10000
spring.datasource.hikari.maximum-pool-size=3

spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://postgres:5432/StudyOrganizer
spring.datasource.username=postgres
spring.datasource.password=postgres

spring.jpa.hibernate.ddl-auto=update

spring.liquibase.enabled=true
spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.yaml
spring.liquibase.url=jdbc:postgresql://postgres:5432/StudyOrganizer
spring.liquibase.user=postgres
spring.liquibase.password=postgres

jwt.secret=2948404D6351655468576D5A7134743777217A25432A462D4A614E645267556A586E3272357538782F413F4428472B4B6250655368566D597033733676397924
spring.security.oauth2.client.registration.google.client-id=931292101113-047eg39rj4ihlcdoluc7j91p55586nm9.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=https://www.googleapis.com/auth/userinfo.email, email, openid, profile, https://www.googleapis.com/auth/documents, https://www.googleapis.com/auth/calendar, https://www.googleapis.com/auth/meetings.space.created
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/api/oauth/callback/google
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline

spring.kafka.consumer.bootstrap-servers=kafka:9092
spring.kafka.producer.bootstrap-servers=kafka:9092
#spring.kafka.consumer.group-id=schedule_group_id
spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.LongDeserializer